openapi: '3.0.0'
servers:
  - url: 'http://localhost:3000/api/v2/storefront'
info:
  version: 2.0.0
  title: Spree API V2 - Storefront
  description: >-
    <p>
      Storefront API v2 is a modern REST API based on the
      <a href="https://jsonapi.org/" target="_blank">JSON API spec</a>
      which provides you with necessary endpoints to build amazing user
      intefaces either in JavaScript frameworks or native mobile libraries.
    </p>
    <p>
      Please read our introduction to the API v2 [insert link here]
    </p>
    <p>
      Click here to download Postman collection with example operations
    </p>
paths:
  '/cart':
    post:
      description: >-
        <p>Creates new Cart and returns it attributes.</p>
        <br />
        <p>
          <strong>token</strong> attribute, can be used for authorization of all operations
          on this particular Cart and Checkout.
        </p>
      tags:
        - Cart
      responses:
        '201':
          description: 201 response means that that a Cart was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
      parameters:
        - $ref: '#/components/parameters/CartIncludeParam'
    get:
      description: Returns contents of the cart
      tags:
        - Cart
      responses:
        '200':
          description: 200 response means that correct cart was returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          $ref: '#/components/responses/404NotFound'
      security:
        - orderToken: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CartIncludeParam'

  '/cart/add_item':
    post:
      description: >-
        <p>Adds a Product Variant to the Cart</p>
        <br />
        <p>
          Additional parameters passed in <strong>options</strong> hash
          must be registered in <cite>config/initialiers/spree.rb</cite>, eg.
        </p>
        <br />
        <blockquote>
          Spree::PermittedAttributes.line_item_attributes << :foo
        </blockquote>
      tags:
        - Cart
      responses:
        '200':
          description: 200 response means that the item was added to the cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          $ref: '#/components/responses/404NotFound'
      security:
        - orderToken: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CartIncludeParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variant_id:
                  type: string
                quantity:
                  type: integer
                options:
                  type: object
                  description: >-
                    Additional custom options.
                    You need to add them via
                    `Spree::PermittedAttributes.line_item_attributes << :foo`
                    in `config/initialiers/spree.rb`
              example:
                variant_id: "1"
                quantity: 5

  '/cart/set_quantity':
    patch:
      description: Sets the quantity of a given line item. It has to be a positive integer greater than 0.
      tags:
        - Cart
      responses:
        '200':
          description: 200 response means that a new quantity has been successfully set for a requested line item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '422':
          description: 422 response means that stock quantity is not sufficient for this request to be fulfielled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - orderToken: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CartIncludeParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                line_item_id:
                  type: string
                quantity:
                  type: integer
              example:
                line_item_id: "1"
                quantity: 5

  '/cart/remove_line_item/{line_item_id}':
    delete:
      description: Removes line item from current order
      tags:
        - Cart
      parameters:
        - $ref: '#/components/parameters/LineItemId'
        - $ref: '#/components/parameters/CartIncludeParam'
      responses:
        '200':
          description: 200 response means that the requested line item has been removed from the order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          $ref: '#/components/responses/404NotFound'
      security:
        - orderToken: []
        - bearerAuth: []

  '/cart/empty':
    patch:
      description: Empties the order
      tags:
        - Cart
      responses:
        '200':
          description: 200 response means that the cart has been successfully emptied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '404':
          $ref: '#/components/responses/404NotFound'
      security:
        - orderToken: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CartIncludeParam'

  '/cart/apply_coupon_code':
    patch:
      description: Applies a coupon code to the Cart
      tags:
        - Cart
      responses:
        '200':
          description: 200 response means that coupon code was applied successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '422':
          description: 422 response means that coupon code couldn't be applied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - orderToken: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CartIncludeParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coupon_code:
                  type: string
                  example: 'DISCOUNT10'

  '/cart/remove_coupon_code/{coupon_code}':
    delete:
      description: Removes a coupon code from the Cart
      tags:
        - Cart
      parameters:
        - name: coupon_code
          in: path
          required: true
          description: Coupon code applied to Order
          schema:
            type: string
          example: 'DISCOUNT10'
        - $ref: '#/components/parameters/CartIncludeParam'
      responses:
        '200':
          description: 200 response means that coupon code was removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '422':
          description: 422 response means that coupon code couldn't be removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - orderToken: []
        - bearerAuth: []

  '/checkout/next':
    patch:
      description: Goes to the next Checkout step
      tags:
        - Checkout
      responses:
        '200':
          description: 200 response means that the Checkout was transitioned to the next step
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '422':
          description: 422 response means that Checkout couldn't transition to the next step
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/404NotFound'
      security:
        - orderToken: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CartIncludeParam'

  '/checkout/advance':
    patch:
      description: Advances Checkout to the furthest Checkout step validation allows, until the Complete step
      tags:
        - Checkout
      responses:
        '200':
          description: 200 response means that the Checkout was transitioned to the next step
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '422':
          description: 422 response means that Checkout couldn't transition to the next step
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          $ref: '#/components/responses/404NotFound'
      security:
        - orderToken: []
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CartIncludeParam'

  '/checkout/complete':
    patch:
        description: Completes the Checkout
        tags:
          - Checkout
        responses:
          '200':
            description: 200 response means that the Checkout was completed
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Cart'
          '422':
            description: 422 response means that Checkout couldn't be completed
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Error'
          '404':
            $ref: '#/components/responses/404NotFound'
        security:
          - orderToken: []
          - bearerAuth: []
        parameters:
        - $ref: '#/components/parameters/CartIncludeParam'

  '/products':
    get:
      description: >-
        Returns a list of Products
      tags:
        - Products
      operationId: index
      parameters:
        - in: query
          name: filter
          schema:
            type: string
          example: >-
           'filter[ids]=1,2,3&filter[price]=10,20&filter[taxons]=1,2,3,4&filter[name]=shirt&filter[options][color]=red&filter[options][color]=blue&filter[options][size]=10'
          description: >-
            Filter Products based on:
            <ul>
              <li>name (supports wild-card, partial-word match search)</li>
              <li>ids (IDs of selected products to display)</li>
              <li>taxons (IDs of categories, brands, etc)</li>
              <li>price (range)</li>
              <li>options (eg. color, size)</li>
            </ul>
        - in: query
          name: sort
          schema:
            type: string
          example: >-
            -updated_at,price
          description:  >-
            Sort products based on:
            <ul>
              <li>price (ascending/descenging)</li>
              <li>updated_at (ascending/descenging)</li>
            </ul>
            Use <q>-</q> sign to set descenging sort, eg. <q>-updated_at</q>
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/PerPageParam'
        - $ref: '#/components/parameters/ProductIncludeParam'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsList'
  '/products/{id}':
    get:
      description: >-
        To view the details for a single product, make a request using that
        product's permalink:<br /> <code>GET /api/v2/products/a-product</code>
        <br /><br />You may also query by the product's id attribute:<br /><code>GET
        /api/v2/products/1 </code> <br /><br />Note that the API will attempt a
        permalink lookup before an ID lookup.
      tags:
        - Products
      operationId: show
      parameters:
        - $ref: '#/components/parameters/IdOrPermalink'
        - $ref: '#/components/parameters/ProductIncludeParam'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/404NotFound'

  '/taxons/{id}':
    get:
      description: >-
        To view the details for a single Taxon, make a request using that
        Taxon's permalink:<br /> <code>GET /api/v2/taxons/t-shirts</code>
        <br /><br />You may also query by the Taxons's ID attribute:<br /><code>GET
        /api/v2/taxons/1 </code> <br /><br />Note that the API will attempt a
        permalink lookup before an ID lookup.
      tags:
        - Taxons
      operationId: show
      parameters:
        - $ref: '#/components/parameters/IdOrPermalink'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Taxon'
        '404':
          $ref: '#/components/responses/404NotFound'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: >-
        User token to authorize Cart and Checkout requests. You can obtain it
        from `http://your_store_url.com/spree_oauth` endpoint.
        It is required to associate Cart with the User.
        See OAuth documentation for more details.
    orderToken:
      type: apiKey
      in: header
      description: >-
        <p>
          Order token to authorize Cart and Checkout requests.
          Useful for guest checouts when you don't have the user token
          (bearerAuth)
        </p>
        <p>
          You can obtain it from the `/cart` endpoint -
          it's part of the response (value of the `token` field).
        </p>
      name: X-Spree-Order-Token
  schemas:
    Error:
      required:
        - message
      properties:
        message:
          type: string
    ListLinks:
      properties:
        self:
          type: string
          description: 'URL to the current page of the listing'
        next:
          type: string
          description: 'URL to the next page of the listing'
        prev:
          type: string
          description: 'URL to the previous page of the listing'
        last:
          type: string
          description: 'URL to the last page of the listing'
        first:
          type: string
          description: 'URL to the first page of the listing'
    ListMeta:
      properties:
        count:
          type: number
          example: 7
          description: 'Number of items on the current listing'
        total_count:
          type: number
          example: 145
          description: 'Number of all items matching the criteria'
        total_pages:
          type: number
          example: 10
          description: 'Number of all pages containing items matching the criteria'
    Timestamp:
      type: string
      example: '2018-05-25T11:22:57.214-04:00'
    Address:
      required:
        - data
      properties:
        data:
          type: object
          required:
            - id
            - type
            - attributes
          properties:
            id:
              type: string
              example: '1'
            type:
              type: string
              default: 'address'
              example: 'address'
            attributes:
              type: object
              properties:
                firstname:
                  type: string
                  example: 'John'
                lastname:
                  type: string
                  example: 'Doe'
                address1:
                  type: string
                  example: '1600 Amphitheatre Pkwy'
                address2:
                  type: string
                  example: 'Suite 1'
                city:
                  type: string
                  example: 'Mountain View'
                zipcode:
                  type: string
                  example: '94043'
                phone:
                  type: string
                  example: '(+1) 123 456 789'
                state_name:
                  type: string
                  example: 'California'
                state_code:
                  type: string
                  example: 'CA'
                country_name:
                  type: string
                  example: 'United States of America'
                country_iso3:
                  type: string
                  example: 'USA'
                company:
                  type: string
                  example: 'Google Inc.'
    Cart:
      required:
        - data
        - included
      properties:
        data:
          type: object
          required:
            - id
            - type
            - attributes
            - relationships
          properties:
            id:
              type: string
            type:
              type: string
            attributes:
              type: object
              properties:
                number:
                  type: string
                  example: 'R123456789'
                email:
                  type: string
                  example: 'spree@example.com'
                item_total:
                  type: string
                  example: '19.99'
                display_item_total:
                  type: string
                  example: '$19.99'
                total:
                  type: string
                  example: '29.99'
                display_total:
                  type: string
                  example: '$29.99'
                ship_total:
                  type: string
                  example: '0.00'
                display_ship_total:
                  type: string
                  example: '$19.99'
                adjustment_total:
                  type: string
                  example: '10.00'
                display_adjustment_total:
                  type: string
                  example: '$10.00'
                created_at:
                  $ref: '#/components/schemas/Timestamp'
                updated_at:
                  $ref: '#/components/schemas/Timestamp'
                included_tax_total:
                  type: string
                  example: '5.00'
                additional_tax_total:
                  type: string
                  example: '5.00'
                display_additional_tax_total:
                  type: string
                  example: '$5.00'
                display_included_tax_total:
                  type: string
                  example: '$5.00'
                tax_total:
                  type: string
                  example: '10.00'
                display_tax_total:
                  type: string
                  example: '$10.00'
                item_count:
                  type: number
                  example: 2
                  description: 'Total quantity number of all items added to the Cart'
                special_instructions:
                  type: string
                  example: 'Please wrap it as a gift'
                  description: 'Message added by the Customer'
                currency:
                  type: string
                  example: 'USD'
                state:
                  type: string
                  example: 'address'
                  description: 'State of the Cart in the Checkout flow'
                token:
                  type: string
                  example: abcdef123456
                  description: >-
                    Used for authorizing any action for an order within Spree’s
                    API
            relationships:
              type: object
              properties:
                line_items:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Relation'
                promotions:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Relation'
                variants:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/Relation'
                user:
                  type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Relation'
                billing_address:
                  type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Relation'
                shipping_address:
                  type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Relation'
        included:
          type: array
          items:
            type: object
            oneOf:
              - $ref: '#/components/schemas/Variant'
              - $ref: '#/components/schemas/LineItem'
              - $ref: '#/components/schemas/Promotion'
              - $ref: '#/components/schemas/User'
              - $ref: '#/components/schemas/Address'
    Image:
      required:
        - data
      properties:
        data:
          type: object
          properties:
            id:
              type: string
              example: '1'
            type:
              type: string
              default: 'image'
              example: 'image'
            attributes:
              type: object
              properties:
                position:
                  type: integer
                  example: 0
                  description: 'Sort order of images set in the Admin Panel'
                styles:
                  type: array
                  description: 'An array of pre-scaled image styles'
                  items:
                    $ref: '#/components/schemas/ImageStyle'
    ImageStyle:
      properties:
        url:
          type: string
          example: 'http://localhost:3000/rails/active_storage/disk/eyJfcmFpbHMiOnsibWVzc2FnZSI6IkJBaEpJbWQyWVhKcFlXNTBjeTltWm1sMmRURlNORFpZWjJaSFpYUkdZMjk2WWsxM1RHWXZNVGs1T1RCak5XVmlNamN4TlRnd1pqVTBabUpqTWpCbFkyVXhZMlZpTTJFd05ERTJZemMzT0dKaE5tSTFNREkyT0dKaFpqa3paV1JtWTJWaE16aGxaQVk2QmtWVSIsImV4cCI6IjIwMTgtMDYtMjRUMTM6NTk6NTguOTY5WiIsInB1ciI6ImJsb2Jfa2V5In19--5e9ff358dc747f73754e332678c5762114ac6f3f/ror_jr_spaghetti.jpeg?content_type=image%2Fjpeg&disposition=inline%3B+filename%3D%22ror_jr_spaghetti.jpeg%22%3B+filename%2A%3DUTF-8%27%27ror_jr_spaghetti.jpeg'
          description: 'Absolute URL of the uploaded image in selected style (width/height)'
        width:
          type: integer
          example: 1920
          description: 'Actual width of image'
        height:
          type: integer
          example: 1080
          description: 'Actual height of image'
    User:
      required:
        - data
      properties:
        data:
          type: object
          properties:
            id:
              type: string
              example: 1
            type:
              type: string
              default: 'user'
              example: 'user'
            attributes:
              type: object
              properties:
                email:
                  type: string
                  example: 'spree@example.com'
    LineItem:
      required:
        - data
      properties:
        data:
          type: object
          properties:
            id:
              type: string
              example: '1'
            type:
              type: string
              default: 'line_item'
              example: 'line_item'
            attributes:
              type: object
              properties:
                name:
                  type: string
                  example: 'Sample product'
                quantity:
                  type: integer
                  example: 1
                slug:
                  type: string
                  example: 'sample-product'
                options_text:
                  type: string
                  example: 'Size: small, Color: red'
                price:
                  type: string
                  example: '125.0'
                  description: Price of Product per quantity
                currency:
                  type: string
                  example: 'USD'
                display_price:
                  type: string
                  example: '$125.00'
                  description: Price of Product per quantity
                total:
                  type: string
                  example: '250.0'
                  description: >-
                    Total price of Line Item including adjastments, promotions
                    and taxes
                display_total:
                  type: string
                  example: '$250.00'
                  description: >-
                    Total price of Line Item including adjastments, promotions
                    and taxes
                adjustment_total:
                  type: string
                  example: '10.0'
                  description: TBD
                display_adjustment_total:
                  type: string
                  example: '$10.00'
                  description: TBD
                additional_tax_total:
                  type: string
                  example: '5.0'
                display_additional_tax_total:
                  type: string
                  example: '$5.00'
                promo_total:
                  type: string
                  example: '-5.0'
                display_promo_total:
                  type: string
                included_tax_total:
                  type: string
                  example: '0.0'
                  description: 'Taxes included in the price, eg. VAT'
                display_inluded_tax_total:
                  type: string
                  example: '$0.00'
    Promotion:
      required:
        - data
      properties:
        data:
          type: object
          properties:
            id:
              type: string
              example: '1'
            type:
              type: string
              example: 'promotion'
              default: 'promotion'
            attributes:
              type: object
              properties:
                name:
                  type: string
                  example: '10% Discount'
    Product:
      required:
        - data
        - included
      properties:
        data:
          $ref: '#/components/schemas/ProductAttributesAndRelationships'
        included:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/OptionType'
              - $ref: '#/components/schemas/OptionValue'
              - $ref: '#/components/schemas/ProductProperty'
              - $ref: '#/components/schemas/Property'
              - $ref: '#/components/schemas/VariantAttributesAndRelationships'
              - $ref: '#/components/schemas/Image'
              - $ref: '#/components/schemas/TaxonAttributesAndRelationships'
    ProductsList:
      required:
        - links
        - data
        - included
      properties:
        links:
          $ref: '#/components/schemas/ListLinks'
        meta:
          $ref: '#/components/schemas/ListMeta'
        data:
          type: array
          items:
            $ref: '#/components/schemas/ProductAttributesAndRelationships'
        included:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/OptionType'
              - $ref: '#/components/schemas/OptionValue'
              - $ref: '#/components/schemas/ProductProperty'
              - $ref: '#/components/schemas/Property'
              - $ref: '#/components/schemas/VariantAttributesAndRelationships'
              - $ref: '#/components/schemas/Image'
              - $ref: '#/components/schemas/TaxonAttributesAndRelationships'
    ProductAttributes:
      type: object
      properties:
        name:
          type: string
          example: 'Example product'
        description:
          type: string
          example: 'Example description'
        price:
          type: string
          example: '15.99'
        currency:
          type: string
          example: 'USD'
        display_price:
          type: string
          example: $15.99
        available_on:
          type: string
          example: '2012-10-17T03:43:57Z'
        purchasable:
          type: boolean
          example: true
          description: 'Indicates if any of Variants are in stock or backorderable'
        in_stock:
          type: boolean
          example: true
          description: 'Indicates if any of Variants are in stock'
        backorderable:
          type: boolean
          example: true
          description: 'Indicates if any of Variants are backeorderable'
        slug:
          type: string
          example: 'example-product'
        meta_description:
          type: string
          example: 'Example product'
        meta_keywords:
          type: string
          example: 'example, product'
        updated_at:
          $ref: '#/components/schemas/Timestamp'
    ProductRelationships:
      type: object
      properties:
        default_variant:
          type: object
          description: 'The default Variant for given product'
          properties:
            data:
              $ref: '#/components/schemas/Relation'
        product_properties:
          type: object
          description: 'List of Product Properties'
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Relation'
        option_types:
          type: object
          description: 'List of Product Option Types'
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Relation'
        variants:
          type: object
          description: 'List of Product Variants, excluding Master Variant'
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Relation'
        taxons:
          type: object
          description: 'List of Taxons associated with Product'
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Relation'
    ProductAttributesAndRelationships:
      properties:
        id:
          type: string
          example: '1'
        type:
          type: string
          default: 'product'
          example: 'product'
        attributes:
          $ref: '#/components/schemas/ProductAttributes'
        relationships:
          $ref: '#/components/schemas/ProductRelationships'
    Relation:
      required:
        - id
        - type
      properties:
        id:
          type: string
        type:
          type: string
    Taxon:
      required:
        - data
        - included
      properties:
        data:
          $ref: '#/components/schemas/TaxonAttributesAndRelationships'
        included:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/ProductAttributesAndRelationships'
              - $ref: '#/components/schemas/TaxonAttributesAndRelationships'
              - $ref: '#/components/schemas/TaxonomyAttributesAndRelationships'
              - $ref: '#/components/schemas/Image'
    TaxonAttributes:
      type: object
      properties:
        name:
          type: string
          example: 'T-shirts'
        pretty_name:
          type: string
          example: 'Clothes > T-shirts'
        permalink:
          type: string
          example: 't-shirts'
        seo_title:
          type: string
          example: 'Clothes - T-shirts'
        meta_title:
          type: string
          example: 'T-shirts'
        meta_description:
          type: string
          example: 'A list of cool t-shirts '
        meta_keywords:
          type: string
          example: 't-shirts, cool'
        left:
          type: integer
          example: 1
        right:
          type: integer
          example: 2
        position:
          type: integer
          example: 0
        depth:
          type: integer
          example: 1
        is_root:
          type: boolean
          example: true
          description: 'Indicates if the Taxon is the root node of this Taxonomy tree'
        is_child:
          type: boolean
          example: true
          description: 'Returns true is this is a child node of this Taxonomy tree'
        is_leaf:
          type: boolean
          example: false
          description: 'Returns true if this is the end of a branch of this Taxonomy tree'
        updated_at:
          type: string
          example: '2018-06-18T10:57:29.704Z'
    TaxonRelationships:
      type: object
      properties:
        parent:
          type: object
          description: 'Parent node'
          properties:
            data:
              $ref: '#/components/schemas/Relation'
        children:
          type: object
          description: 'List of child nodes'
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Relation'
        taxonomy:
          type: object
          description: 'Taxonomy associated with this Taxon'
          properties:
            data:
              $ref: '#/components/schemas/Relation'
        image:
          type: object
          description: 'Image associated with Taxon'
          properties:
            data:
              $ref: '#/components/schemas/Relation'
        products:
          type: object
          description: 'List of active and available Products associated with this Taxon'
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Relation'
    TaxonAttributesAndRelationships:
      properties:
        id:
          type: string
          example: '1'
        type:
          type: string
          default: 'taxon'
          example: 'taxon'
        attributes:
          $ref: '#/components/schemas/TaxonAttributes'
        relationships:
          $ref: '#/components/schemas/TaxonRelationships'
    TaxonomyAttributesAndRelationships:
      type: object
      properties:
        id:
          type: string
          example: '1'
        type:
          type: string
          default: 'taxonomy'
          example: 'taxonomy'
        attributes:
          $ref: '#/components/schemas/TaxonomyAttributes'
    TaxonomyAttributes:
      type: object
      properties:
        name:
          type: string
          example: 'Categories'
        position:
          type: integer
          example: 0
    OptionType:
      required:
        - data
      properties:
        data:
          type: object
          properties:
            id:
              type: string
              example: '1'
            type:
              type: string
              default: 'option_type'
              example: 'option_type'
            attributes:
              type: object
              properties:
                name:
                  type: string
                  example: 'color'
                presentation:
                  type: string
                  example: 'Color'
                position:
                  type: integer
                  example: 1
    OptionValue:
      required:
        - data
      properties:
        data:
          type: object
          properties:
            id:
              type: string
              example: '1'
            type:
              type: string
              default: 'option_value'
              example: 'option_value'
            attributes:
              type: object
              properties:
                name:
                  type: string
                  example: 'red'
                presentation:
                  type: string
                  example: 'Red'
                position:
                  type: integer
                  example: 1
            relationships:
              type: object
              properties:
                option_type:
                  type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Relation'
    Property:
      required:
        - data
      properties:
        data:
          type: object
          properties:
            id:
              type: string
              example: '1'
            type:
              type: string
              default: 'property'
              example: 'property'
            attributes:
              type: object
              properties:
                name:
                  type: string
                  example: 'material'
                presentation:
                  type: string
                  example: 'Material'
    ProductProperty:
      required:
        - data
      properties:
        data:
          type: object
          properties:
            id:
              type: string
              example: '1'
            type:
              type: string
              default: 'product_property'
              example: 'product_property'
            attributes:
              type: object
              properties:
                name:
                  type: string
                  example: 'silk'
                presentation:
                  type: string
                  example: 'Silk'
            relationships:
              type: object
              properties:
                property:
                  type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Property'
    Variant:
      required:
        - data
        - included
      properties:
        data:
          $ref: '#/components/schemas/VariantAttributesAndRelationships'
        included:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Image'
              - $ref: '#/components/schemas/OptionValue'
              - $ref: '#/components/schemas/OptionType'
    VariantAttributes:
      type: object
      properties:
        name:
          type: string
          example: 'Example product'
          description: 'Product name'
        sku:
          type: string
          example: 'SKU-1001'
        price:
          type: string
          example: '15.99'
        currency:
          type: string
          example: 'USD'
        display_price:
          type: string
          example: '$15.99'
        weight:
          type: string
          example: '10'
        height:
          type: string
          example: '10'
        width:
          type: string
          example: '10'
        depth:
          type: string
          example: '10'
        is_master:
          type: boolean
          example: false
          description: 'Indicates if Variant is the master Variant'
        options_text:
          type: string
          example: 'Size: small, Color: red'
        slug:
          type: string
          example: 'example-product'
          description: 'Product slug'
        description:
          type: string
          example: 'Example description'
          description: 'Product description'
        purchasable:
          type: boolean
          example: true
          description: 'Indicates if Variant is in stock or backorderable'
        in_stock:
          type: boolean
          example: true
          description: 'Indicates if Variant is in stock'
        backorderable:
          type: boolean
          example: true
          description: 'Indicates if Variant is backorderable'
    VariantRelationships:
      type: object
      properties:
        product:
          type: object
          properties:
            data:
              $ref: '#/components/schemas/Relation'
        images:
          type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Relation'
        option_values:
          type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Relation'
    VariantAttributesAndRelationships:
      properties:
        id:
          type: string
          example: '1'
        type:
          type: string
          default: 'variant'
          example: 'variant'
        attributes:
          $ref: '#/components/schemas/VariantAttributes'
        relationships:
          $ref: '#/components/schemas/VariantRelationships'
  parameters:
    IdOrPermalink:
      name: id
      in: path
      required: true
      description: ID or a permalink
      schema:
        type: string
      examples:
        ID: '1'
        Permalink: 'some-product'
    LineItemId:
      name: line_item_id
      in: path
      required: true
      description: Line Item ID
      schema:
        type: string
      example: '1'
    PageParam:
      name: page
      in: query
      description: Number of requested page when paginating collection
      schema:
        type: integer
      example: 1
      minimum: 1
    PerPageParam:
      name: per_page
      in: query
      description: Number of requested records per page when paginating collection
      schema:
        type: integer
      example: 1
      minimum: 1
    CartIncludeParam:
      name: include
      in: query
      schema:
        type: string
      description: >-
        <p>Specify what related resources (relationships) you would like to receive in the response body.</p>
        <p>You can also fetch relationships of relationships.</p>
        <p>
          Format:
          <ul>
            <li>line_items,variants,promotions</li>
            <li>variants,variants.images</li>
          </ul>
        <p>
          More information:
          <a href="https://jsonapi.org/format/#fetching-includes">https://jsonapi.org/format/#fetching-includes</a>
        </p>
      example: 'line_items,variants,variants.images,billing_address,shipping_address,user,payments,shipments,promotions'
    ProductIncludeParam:
      name: include
      in: query
      schema:
        type: string
      description: >-
        <p>Specify what related resources (relationships) you would like to receive in the response body.</p>
        <p>You can also fetch relationships of relationships.</p>
        <p>
          Format:
          <ul>
            <li>default_variant,variants,option_types,product_properties,taxons,images</li>
            <li>variants,variants.images,variants.option_values</li>
          </ul>
        <p>
          More information:
          <a href="https://jsonapi.org/format/#fetching-includes">https://jsonapi.org/format/#fetching-includes</a>
        </p>
      example: 'default_variant,variants,option_types,product_properties,taxons,images'
  responses:
    404NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
